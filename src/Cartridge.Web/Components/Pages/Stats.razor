@page "/stats"
@rendermode InteractiveServer
@using Cartridge.Web.Components.Layout
@layout RetroLayout
@using Cartridge.Core.Interfaces
@using Cartridge.Core.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Authorize]
@inject IGameLibraryService GameLibraryService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>CARTRIDGE - Statistics</PageTitle>

<div style="padding: 20px;">
    <div class="library-header">
        <h2 style="color: var(--retro-primary); font-size: 28px; text-transform: uppercase; text-align: center;">
            ◄► YOUR GAMING STATISTICS ◄►
        </h2>
    </div>

    @if (library == null)
    {
        <div class="loading-spinner"></div>
    }
    else
    {
        @* Overall Stats Section *@
        <div style="margin-bottom: 30px;">
            <div class="filter-title" style="margin-bottom: 15px;">► OVERALL STATISTICS</div>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                <div class="stat-card">
                    <div class="stat-value">@library.Games.Count</div>
                    <div class="stat-label">Total Games</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@GetTotalPlaytimeHours().ToString("F1")</div>
                    <div class="stat-label">Total Hours Played</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@library.ConnectedPlatforms.Count(p => p.Value)</div>
                    <div class="stat-label">Connected Platforms</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@GetAveragePlaytimeHours().ToString("F1")</div>
                    <div class="stat-label">Avg Hours per Game</div>
                </div>
            </div>
        </div>

        @* Platform Breakdown *@
        <div style="margin-bottom: 30px;">
            <div class="filter-title" style="margin-bottom: 15px;">► PLATFORM BREAKDOWN</div>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                @foreach (var platform in library.Games.GroupBy(g => g.Platform).OrderByDescending(g => g.Count()))
                {
                    var count = platform.Count();
                    var percentage = library.Games.Count > 0 ? (count * 100.0 / library.Games.Count) : 0;
                    var totalHours = platform.Where(g => g.PlaytimeMinutes.HasValue).Sum(g => g.PlaytimeMinutes!.Value) / 60.0;
                    
                    <div class="platform-stat-card">
                        <div style="font-size: 24px; margin-bottom: 8px;">@GetPlatformIcon(platform.Key)</div>
                        <div style="font-size: 18px; font-weight: bold; color: var(--retro-accent); margin-bottom: 5px;">@platform.Key</div>
                        <div style="font-size: 28px; font-weight: bold; color: var(--retro-primary); margin-bottom: 5px;">@count</div>
                        <div style="font-size: 11px; color: var(--retro-text-dim); margin-bottom: 8px;">@percentage.ToString("F1")% of library</div>
                        @if (totalHours > 0)
                        {
                            <div style="font-size: 11px; color: var(--retro-warning);">⏱ @(totalHours.ToString("F1"))h played</div>
                        }
                    </div>
                }
            </div>
        </div>

        @* Platform Playtime Chart *@
        @if (library.Games.Any(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0))
        {
            <div style="margin-bottom: 30px;">
                <div class="filter-title" style="margin-bottom: 15px;">► PLAYTIME BY PLATFORM</div>
                <div style="background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); padding: 20px; border-radius: 4px;">
                    @{
                        var platformPlaytime = library.Games
                            .Where(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0)
                            .GroupBy(g => g.Platform)
                            .Select(g => new {
                                Platform = g.Key,
                                Hours = g.Sum(x => x.PlaytimeMinutes!.Value) / 60.0
                            })
                            .OrderByDescending(g => g.Hours)
                            .ToList();
                        
                        var maxHours = platformPlaytime.Any() ? platformPlaytime.Max(p => p.Hours) : 1;
                    }
                    
                    @foreach (var item in platformPlaytime)
                    {
                        var barWidth = (item.Hours / maxHours) * 100;
                        <div style="margin-bottom: 15px;">
                            <div style="display: flex; align-items: center; margin-bottom: 5px;">
                                <div style="min-width: 150px; font-size: 12px; color: var(--retro-text);">
                                    @GetPlatformIcon(item.Platform) @item.Platform
                                </div>
                                <div style="flex: 1; height: 30px; background-color: rgba(255, 255, 255, 0.1); border: 1px solid var(--retro-border); position: relative; overflow: hidden;">
                                    <div style="height: 100%; width: @(barWidth)%; background: linear-gradient(90deg, var(--retro-accent) 0%, var(--retro-primary) 100%); display: flex; align-items: center; justify-content: flex-end; padding-right: 10px; transition: width 0.5s ease;">
                                        <span style="font-size: 11px; color: white; font-weight: bold; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);">@(item.Hours.ToString("F1"))h</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @* Top Games by Playtime *@
        @if (library.Games.Any(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0))
        {
            <div style="margin-bottom: 30px;">
                <div class="filter-title" style="margin-bottom: 15px;">► TOP 10 MOST PLAYED GAMES</div>
                <div style="background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); padding: 20px; border-radius: 4px;">
                    @foreach (var (game, index) in library.Games
                        .Where(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0)
                        .OrderByDescending(g => g.PlaytimeMinutes)
                        .Take(10)
                        .Select((g, i) => (g, i + 1)))
                    {
                        var hours = game.PlaytimeMinutes!.Value / 60.0;
                        <div style="display: flex; align-items: center; padding: 12px; margin-bottom: 10px; background-color: rgba(255, 255, 255, 0.05); border-left: 4px solid var(--retro-accent);">
                            <div style="min-width: 40px; font-size: 20px; font-weight: bold; color: var(--retro-warning);">@index.</div>
                            <div style="flex: 1;">
                                <div style="font-size: 14px; font-weight: bold; color: var(--retro-primary);">@game.Title</div>
                                <div style="font-size: 11px; color: var(--retro-text-dim); margin-top: 3px;">@game.Platform</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-size: 18px; font-weight: bold; color: var(--retro-accent);">@(hours.ToString("F1"))h</div>
                                @if (game.LastPlayed.HasValue)
                                {
                                    <div style="font-size: 9px; color: var(--retro-text-dim); margin-top: 3px;">Last: @FormatLastPlayed(game.LastPlayed.Value)</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @* Genre Distribution *@
        @if (library.Games.Any(g => g.Genres.Any()))
        {
            <div style="margin-bottom: 30px;">
                <div class="filter-title" style="margin-bottom: 15px;">► GENRE DISTRIBUTION</div>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
                    @foreach (var genre in library.Games
                        .SelectMany(g => g.Genres)
                        .Where(g => !string.IsNullOrEmpty(g))
                        .GroupBy(g => g)
                        .OrderByDescending(g => g.Count())
                        .Take(12))
                    {
                        var count = genre.Count();
                        <div style="background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); padding: 15px; text-align: center; border-radius: 4px;">
                            <div style="font-size: 18px; font-weight: bold; color: var(--retro-accent); margin-bottom: 5px;">@count</div>
                            <div style="font-size: 11px; color: var(--retro-text); word-wrap: break-word;">@genre.Key</div>
                        </div>
                    }
                </div>
            </div>
        }

        @* Library Growth Over Time *@
        @if (library.Games.Any(g => g.AddedToLibrary != default))
        {
            <div style="margin-bottom: 30px;">
                <div class="filter-title" style="margin-bottom: 15px;">► LIBRARY GROWTH (LAST 12 MONTHS)</div>
                <div style="background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); padding: 20px; border-radius: 4px;">
                    @{
                        var now = DateTime.Now;
                        var monthlyData = Enumerable.Range(0, 12)
                            .Select(i => {
                                var month = now.AddMonths(-11 + i);
                                var monthStart = new DateTime(month.Year, month.Month, 1);
                                var monthEnd = monthStart.AddMonths(1);
                                var count = library.Games.Count(g => g.AddedToLibrary >= monthStart && g.AddedToLibrary < monthEnd);
                                return new {
                                    Month = monthStart,
                                    Count = count
                                };
                            })
                            .ToList();
                        
                        var maxCount = monthlyData.Any() && monthlyData.Max(m => m.Count) > 0 ? monthlyData.Max(m => m.Count) : 1;
                    }
                    
                    <div style="display: flex; align-items: flex-end; justify-content: space-between; height: 200px; gap: 8px;">
                        @foreach (var data in monthlyData)
                        {
                            var barHeight = (data.Count / (double)maxCount) * 100;
                            <div style="flex: 1; display: flex; flex-direction: column; align-items: center; justify-content: flex-end;">
                                <div style="position: relative; width: 100%; display: flex; flex-direction: column; align-items: center; justify-content: flex-end; height: 100%;">
                                    @if (data.Count > 0)
                                    {
                                        <div style="position: absolute; top: -20px; font-size: 10px; color: var(--retro-warning); font-weight: bold;">@data.Count</div>
                                    }
                                    <div style="width: 100%; height: @(barHeight)%; background: linear-gradient(180deg, var(--retro-primary) 0%, var(--retro-accent) 100%); border: 2px solid var(--retro-border); border-radius: 2px 2px 0 0; transition: height 0.5s ease; min-height: @(data.Count > 0 ? "10px" : "0");"></div>
                                </div>
                                <div style="font-size: 9px; color: var(--retro-text-dim); margin-top: 5px; writing-mode: horizontal-tb; text-align: center;">@data.Month.ToString("MMM")</div>
                            </div>
                        }
                    </div>
                    
                    <div style="margin-top: 20px; padding-top: 15px; border-top: 1px solid var(--retro-border); text-align: center; font-size: 11px; color: var(--retro-text-dim);">
                        Total games added in last 12 months: <span style="color: var(--retro-accent); font-weight: bold;">@monthlyData.Sum(m => m.Count)</span>
                    </div>
                </div>
            </div>
        }

        @* Recent Activity *@
        @if (library.Games.Any(g => g.LastPlayed.HasValue))
        {
            <div style="margin-bottom: 30px;">
                <div class="filter-title" style="margin-bottom: 15px;">► RECENTLY PLAYED</div>
                <div style="background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); padding: 20px; border-radius: 4px;">
                    @foreach (var game in library.Games
                        .Where(g => g.LastPlayed.HasValue)
                        .OrderByDescending(g => g.LastPlayed)
                        .Take(5))
                    {
                        <div style="display: flex; align-items: center; padding: 12px; margin-bottom: 10px; background-color: rgba(255, 255, 255, 0.05); border-left: 4px solid var(--retro-warning);">
                            @if (!string.IsNullOrEmpty(game.CoverImageUrl))
                            {
                                <img src="@game.CoverImageUrl" alt="@game.Title" style="width: 60px; height: 80px; object-fit: cover; margin-right: 15px; border: 2px solid var(--retro-border);" />
                            }
                            <div style="flex: 1;">
                                <div style="font-size: 14px; font-weight: bold; color: var(--retro-primary);">@game.Title</div>
                                <div style="font-size: 11px; color: var(--retro-text-dim); margin-top: 3px;">@game.Platform</div>
                                @if (game.PlaytimeMinutes.HasValue && game.PlaytimeMinutes > 0)
                                {
                                    <div style="font-size: 11px; color: var(--retro-accent); margin-top: 3px;">⏱ @((game.PlaytimeMinutes.Value / 60.0).ToString("F1"))h played</div>
                                }
                            </div>
                            <div style="text-align: right;">
                                <div style="font-size: 12px; color: var(--retro-warning);">@FormatLastPlayed(game.LastPlayed!.Value)</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @* Additional Stats *@
        <div style="margin-bottom: 30px;">
            <div class="filter-title" style="margin-bottom: 15px;">► MORE STATISTICS</div>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                <div class="stat-card">
                    <div class="stat-value">@library.Games.Count(g => g.IsManuallyAdded)</div>
                    <div class="stat-label">Manually Added Games</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@library.Games.Count(g => !string.IsNullOrEmpty(g.Description))</div>
                    <div class="stat-label">Games with Descriptions</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@library.Games.Count(g => !string.IsNullOrEmpty(g.CoverImageUrl))</div>
                    <div class="stat-label">Games with Cover Art</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@library.Games.Count(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0)</div>
                    <div class="stat-label">Games Played</div>
                </div>
                @if (library.Games.Any(g => g.AddedToLibrary != default))
                {
                    var newestGame = library.Games.OrderByDescending(g => g.AddedToLibrary).FirstOrDefault();
                    @if (newestGame != null)
                    {
                        <div class="stat-card">
                            <div class="stat-value" style="font-size: 14px; line-height: 1.3;">@newestGame.Title</div>
                            <div class="stat-label">Newest Addition</div>
                        </div>
                    }
                }
                @if (library.Games.Any(g => g.ReleaseDate.HasValue))
                {
                    var oldestGame = library.Games.Where(g => g.ReleaseDate.HasValue).OrderBy(g => g.ReleaseDate).FirstOrDefault();
                    @if (oldestGame != null)
                    {
                        <div class="stat-card">
                            <div class="stat-value" style="font-size: 14px; line-height: 1.3;">@oldestGame.Title</div>
                            <div class="stat-label">Oldest Game (@oldestGame.ReleaseDate?.Year)</div>
                        </div>
                    }
                }
            </div>
        </div>

        @* Last Sync Info *@
        <div style="text-align: center; margin-top: 30px; padding: 15px; background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); border-radius: 4px;">
            <div style="font-size: 11px; color: var(--retro-text-dim);">
                📅 Last library sync: @library.LastSync.ToString("MMM dd, yyyy 'at' h:mm tt")
            </div>
        </div>
    }
</div>

<style>
    .stat-card {
        background-color: rgba(0, 0, 0, 0.4);
        border: 2px solid var(--retro-border);
        padding: 20px;
        text-align: center;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

    .stat-card:hover {
        border-color: var(--retro-accent);
        box-shadow: 0 0 10px rgba(var(--retro-accent-rgb), 0.3);
        transform: translateY(-2px);
    }

    .stat-value {
        font-size: 36px;
        font-weight: bold;
        color: var(--retro-primary);
        margin-bottom: 10px;
        line-height: 1;
    }

    .stat-label {
        font-size: 11px;
        color: var(--retro-text-dim);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .platform-stat-card {
        background-color: rgba(0, 0, 0, 0.4);
        border: 2px solid var(--retro-border);
        padding: 20px;
        text-align: center;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

    .platform-stat-card:hover {
        border-color: var(--retro-warning);
        box-shadow: 0 0 10px rgba(255, 193, 7, 0.3);
        transform: translateY(-2px);
    }
</style>

@code {
    private UserLibrary? library;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserAsync();
        
        if (!string.IsNullOrEmpty(currentUserId))
        {
            library = await GameLibraryService.GetUserLibraryAsync(currentUserId);
        }
    }

    private async Task GetCurrentUserAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private double GetTotalPlaytimeHours()
    {
        return library?.Games
            .Where(g => g.PlaytimeMinutes.HasValue)
            .Sum(g => g.PlaytimeMinutes!.Value) / 60.0 ?? 0;
    }

    private double GetAveragePlaytimeHours()
    {
        var gamesWithPlaytime = library?.Games.Where(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0).ToList();
        if (gamesWithPlaytime == null || !gamesWithPlaytime.Any())
            return 0;
        
        return gamesWithPlaytime.Average(g => g.PlaytimeMinutes!.Value) / 60.0;
    }

    private string GetPlatformIcon(Platform platform)
    {
        return platform switch
        {
            Platform.Steam => "🎮",
            Platform.GOG => "🌌",
            Platform.EpicGames => "🎯",
            Platform.AmazonGames => "📦",
            Platform.UbisoftConnect => "🔶",
            Platform.Rockstar => "⭐",
            Platform.Other => "❓",
            _ => "🎮"
        };
    }

    private string FormatLastPlayed(DateTime lastPlayed)
    {
        var timeSpan = DateTime.Now - lastPlayed;
        
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        if (timeSpan.TotalDays < 30)
            return $"{(int)(timeSpan.TotalDays / 7)}w ago";
        
        return lastPlayed.ToString("MMM dd, yyyy");
    }
}
