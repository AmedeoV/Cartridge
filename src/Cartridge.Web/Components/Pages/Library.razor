@page "/library"
@rendermode InteractiveServer
@using Cartridge.Web.Components.Layout
@layout RetroLayout
@using Cartridge.Core.Interfaces
@using Cartridge.Core.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Authorize]
@inject IGameLibraryService GameLibraryService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>CARTRIDGE - My Library</PageTitle>

<div style="padding: 20px;">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
        <h2 style="color: var(--retro-primary); font-size: 28px; text-transform: uppercase; text-align: center; flex: 1;">
            ‚óÑ‚ñ∫ YOUR GAME LIBRARY ‚óÑ‚ñ∫
        </h2>
        <button class="btn-retro" @onclick="SyncLibrary" disabled="@isSyncing">
            @if (isSyncing)
            {
                <span>‚ü≥ Syncing...</span>
            }
            else
            {
                <span>üîÑ Sync Library</span>
            }
        </button>
    </div>

    @if (library == null)
    {
        <div class="loading-spinner"></div>
    }
    else
    {
        <div class="filter-section">
            <div class="filter-title">‚ñ∫ Filter By Platform</div>
            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button class="btn-retro @(selectedPlatform == null ? "btn-retro-secondary" : "")" 
                        @onclick="() => FilterByPlatform(null)">
                    All (@library.Games.Count)
                </button>
                @foreach (var platform in library.Games.Select(g => g.Platform).Distinct().OrderBy(p => p.ToString()))
                {
                    var count = library.Games.Count(g => g.Platform == platform);
                    <button class="btn-retro @(selectedPlatform == platform ? "btn-retro-secondary" : "")" 
                            @onclick="() => FilterByPlatform(platform)">
                        @platform (@count)
                    </button>
                }
            </div>
        </div>

        <div class="filter-section" style="margin-top: 20px;">
            <div class="filter-title">‚ñ∫ Sort By</div>
            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button class="btn-retro @(sortOption == SortOption.Title ? "btn-retro-secondary" : "")" 
                        @onclick="() => ChangeSortOption(SortOption.Title)">
                    üìù Title (A-Z)
                </button>
                <button class="btn-retro @(sortOption == SortOption.LastPlayed ? "btn-retro-secondary" : "")" 
                        @onclick="() => ChangeSortOption(SortOption.LastPlayed)">
                    üéÆ Last Played
                </button>
                <button class="btn-retro @(sortOption == SortOption.MostPlayed ? "btn-retro-secondary" : "")" 
                        @onclick="() => ChangeSortOption(SortOption.MostPlayed)">
                    ‚è± Most Hours
                </button>
                <button class="btn-retro @(sortOption == SortOption.RecentlyAdded ? "btn-retro-secondary" : "")" 
                        @onclick="() => ChangeSortOption(SortOption.RecentlyAdded)">
                    ‚ûï Recently Added
                </button>
                <button class="btn-retro @(sortOption == SortOption.ReleaseDate ? "btn-retro-secondary" : "")" 
                        @onclick="() => ChangeSortOption(SortOption.ReleaseDate)">
                    üìÖ Release Date
                </button>
            </div>
        </div>

        <div style="text-align: center; margin: 20px 0; color: var(--retro-text-dim);">
            Showing @filteredGames.Count of @library.Games.Count games
            @if (library.Games.Any(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0))
            {
                var totalHours = library.Games.Where(g => g.PlaytimeMinutes.HasValue).Sum(g => g.PlaytimeMinutes!.Value) / 60.0;
                <span style="margin-left: 20px; color: var(--retro-accent);">
                    ‚è± Total playtime: @totalHours.ToString("F1") hours
                </span>
            }
        </div>

        <div class="game-grid">
            @foreach (var game in GetSortedGames())
            {
                <div class="game-card" @onclick="() => ShowGameDetails(game)" style="cursor: pointer;">
                    @if (!string.IsNullOrEmpty(game.CoverImageUrl))
                    {
                        <img src="@game.CoverImageUrl" 
                             alt="@game.Title" 
                             class="game-card-image"
                             onerror="this.onerror=null; this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                        <div class="image-placeholder" style="display: none; width: 100%; height: 200px; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                            üéÆ
                        </div>
                    }
                    else
                    {
                        <div class="image-placeholder" style="display: flex; width: 100%; height: 200px; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                            üéÆ
                        </div>
                    }
                    <div class="game-card-body">
                        <h4 class="game-card-title">@game.Title</h4>
                        
                        <div class="game-card-info">
                            <span class="platform-badge">@game.Platform</span>
                        </div>

                        @if (!string.IsNullOrEmpty(game.Publisher))
                        {
                            <div class="game-card-info">
                                <span style="color: var(--retro-text-dim);">üì¶</span> @game.Publisher
                            </div>
                        }

                        @if (game.ReleaseDate.HasValue)
                        {
                            <div class="game-card-info">
                                <span style="color: var(--retro-text-dim);">üìÖ</span> @game.ReleaseDate.Value.ToString("MMM dd, yyyy")
                            </div>
                        }

                        @if (game.PlaytimeMinutes.HasValue && game.PlaytimeMinutes > 0)
                        {
                            <div class="game-card-info" style="color: var(--retro-accent); font-weight: bold;">
                                ‚è± @FormatPlaytime(game.PlaytimeMinutes.Value) hours played
                            </div>
                        }

                        @if (game.LastPlayed.HasValue)
                        {
                            <div class="game-card-info" style="color: var(--retro-warning);">
                                üéÆ Last: @FormatLastPlayed(game.LastPlayed.Value)
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        @if (!filteredGames.Any())
        {
            <div style="text-align: center; padding: 60px; color: var(--retro-text-dim);">
                <p style="font-size: 24px;">No games found</p>
                <p>Try selecting a different platform filter</p>
            </div>
        }
    }

    @* Game Details Modal *@
    @if (selectedGame != null)
    {
        <div class="modal-overlay" @onclick="CloseGameDetails">
            <div class="modal-content" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h3>@selectedGame.Title</h3>
                    <button class="modal-close" @onclick="CloseGameDetails">‚úï</button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(selectedGame.CoverImageUrl))
                    {
                        <img src="@selectedGame.CoverImageUrl" alt="@selectedGame.Title" style="max-width: 300px; max-height: 400px; margin: 0 auto 20px; display: block; border: 4px solid var(--retro-border);" />
                    }
                    
                    <div style="margin-bottom: 15px;">
                        <span class="platform-badge">@selectedGame.Platform</span>
                        @foreach (var genre in selectedGame.Genres.Take(5))
                        {
                            <span style="display: inline-block; padding: 4px 8px; margin: 2px; border: 1px solid var(--retro-text-dim); color: var(--retro-text-dim); font-size: 11px;">
                                @genre
                            </span>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(selectedGame.Description))
                    {
                        <div style="margin: 20px 0; padding: 15px; background-color: rgba(0, 0, 0, 0.3); border-left: 4px solid var(--retro-accent); line-height: 1.6;">
                            <strong style="color: var(--retro-accent);">Description:</strong><br/>
                            @selectedGame.Description
                        </div>
                    }
                    else
                    {
                        <div style="margin: 20px 0; padding: 15px; background-color: rgba(0, 0, 0, 0.2); border-left: 4px solid var(--retro-text-dim); line-height: 1.6; color: var(--retro-text-dim); font-style: italic;">
                            No description available. Try syncing your library to fetch metadata.
                        </div>
                    }

                    <div class="game-details-grid">
                        @if (!string.IsNullOrEmpty(selectedGame.Developer))
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üë®‚Äçüíª Developer:</strong><br/>
                                @selectedGame.Developer
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(selectedGame.Publisher))
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üì¶ Publisher:</strong><br/>
                                @selectedGame.Publisher
                            </div>
                        }

                        @if (selectedGame.ReleaseDate.HasValue)
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üìÖ Release Date:</strong><br/>
                                @selectedGame.ReleaseDate.Value.ToString("MMMM dd, yyyy")
                            </div>
                        }

                        @if (selectedGame.PlaytimeMinutes.HasValue && selectedGame.PlaytimeMinutes > 0)
                        {
                            <div>
                                <strong style="color: var(--retro-accent);">‚è± Playtime:</strong><br/>
                                @FormatPlaytime(selectedGame.PlaytimeMinutes.Value) hours
                            </div>
                        }
                        else
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">‚è± Playtime:</strong><br/>
                                <span style="color: var(--retro-text-dim); font-style: italic;">No playtime recorded</span>
                            </div>
                        }

                        @if (selectedGame.LastPlayed.HasValue)
                        {
                            <div>
                                <strong style="color: var(--retro-warning);">üéÆ Last Played:</strong><br/>
                                @FormatLastPlayed(selectedGame.LastPlayed.Value)
                            </div>
                        }

                        <div>
                            <strong style="color: var(--retro-text-dim);">‚ûï Added to Library:</strong><br/>
                            @selectedGame.AddedToLibrary.ToString("MMMM dd, yyyy")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private UserLibrary? library;
    private List<Game> filteredGames = new();
    private Platform? selectedPlatform;
    private string? currentUserId;
    private bool isSyncing = false;
    private Game? selectedGame = null;
    private SortOption sortOption = SortOption.LastPlayed; // Default to last played

    private enum SortOption
    {
        Title,
        LastPlayed,
        MostPlayed,
        RecentlyAdded,
        ReleaseDate
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserAsync();
        
        if (!string.IsNullOrEmpty(currentUserId))
        {
            library = await GameLibraryService.GetUserLibraryAsync(currentUserId);
            filteredGames = library.Games.ToList();
        }
    }

    private async Task GetCurrentUserAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private async Task SyncLibrary()
    {
        if (string.IsNullOrEmpty(currentUserId) || isSyncing)
            return;

        isSyncing = true;
        StateHasChanged();

        try
        {
            await GameLibraryService.SyncLibraryAsync(currentUserId);
            library = await GameLibraryService.GetUserLibraryAsync(currentUserId);
            FilterByPlatform(selectedPlatform); // Reapply current filter
        }
        finally
        {
            isSyncing = false;
            StateHasChanged();
        }
    }

    private void ShowGameDetails(Game game)
    {
        selectedGame = game;
        StateHasChanged();
    }

    private void CloseGameDetails()
    {
        selectedGame = null;
        StateHasChanged();
    }

    private void FilterByPlatform(Platform? platform)
    {
        selectedPlatform = platform;
        if (library != null)
        {
            filteredGames = platform.HasValue
                ? library.Games.Where(g => g.Platform == platform.Value).ToList()
                : library.Games.ToList();
            StateHasChanged();
        }
    }

    private void ChangeSortOption(SortOption option)
    {
        sortOption = option;
        StateHasChanged();
    }

    private IEnumerable<Game> GetSortedGames()
    {
        return sortOption switch
        {
            SortOption.Title => filteredGames.OrderBy(g => g.Title),
            SortOption.LastPlayed => filteredGames
                .OrderByDescending(g => g.LastPlayed ?? DateTime.MinValue)
                .ThenByDescending(g => g.AddedToLibrary),
            SortOption.MostPlayed => filteredGames
                .OrderByDescending(g => g.PlaytimeMinutes ?? 0)
                .ThenBy(g => g.Title),
            SortOption.RecentlyAdded => filteredGames
                .OrderByDescending(g => g.AddedToLibrary)
                .ThenBy(g => g.Title),
            SortOption.ReleaseDate => filteredGames
                .OrderByDescending(g => g.ReleaseDate ?? DateTime.MinValue)
                .ThenBy(g => g.Title),
            _ => filteredGames.OrderBy(g => g.Title)
        };
    }

    private string FormatPlaytime(int minutes)
    {
        return (minutes / 60.0).ToString("F1");
    }

    private string FormatLastPlayed(DateTime lastPlayed)
    {
        var days = (DateTime.UtcNow - lastPlayed).Days;
        if (days == 0) return "Today";
        if (days == 1) return "Yesterday";
        if (days < 7) return $"{days} days ago";
        if (days < 30) return $"{days / 7} weeks ago";
        return lastPlayed.ToString("MMM dd, yyyy");
    }
}
