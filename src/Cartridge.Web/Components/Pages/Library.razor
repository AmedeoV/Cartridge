@page "/library"
@rendermode InteractiveServer
@using Cartridge.Web.Components.Layout
@layout RetroLayout
@using Cartridge.Core.Interfaces
@using Cartridge.Core.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@implements IDisposable
@attribute [Authorize]
@inject IGameLibraryService GameLibraryService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>CARTRIDGE - My Library</PageTitle>

<div style="padding: 20px;">
    <div class="library-header">
        <h2 style="color: var(--retro-primary); font-size: 28px; text-transform: uppercase; text-align: center;">
            ‚óÑ‚ñ∫ YOUR GAME LIBRARY ‚óÑ‚ñ∫
        </h2>
        <div class="library-actions">
            <button class="btn-retro" @onclick="OpenAddGameModal">
                ‚ûï Add Game
            </button>
        </div>
    </div>

    @if (library == null)
    {
        <div class="loading-spinner"></div>
    }
    else
    {
        <div class="filter-section" style="margin-bottom: 20px;">
            <div style="position: relative; max-width: 800px; margin: 0 auto;">
                <div style="position: relative;">
                    <span style="position: absolute; left: 15px; top: 50%; transform: translateY(-50%); font-size: 18px; pointer-events: none;">üîç</span>
                    <input type="text" 
                           class="search-input" 
                           placeholder="Search your games by title, developer, publisher, or genre..."
                           @bind="searchQuery"
                           @bind:event="oninput"
                           @onkeyup="ApplyFilters"
                           style="width: 100%; padding: 15px 45px 15px 45px; background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); color: var(--retro-text); font-family: 'Courier New', monospace; font-size: 16px; border-radius: 4px;" />
                    @if (!string.IsNullOrWhiteSpace(searchQuery))
                    {
                        <button @onclick="ClearSearch" 
                                title="Clear search"
                                style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); background: none; border: none; color: var(--retro-warning); cursor: pointer; font-size: 20px; padding: 0; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center;">
                            √ó
                        </button>
                    }
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 15px;">
                <button class="btn-retro" @onclick="ToggleFilters" style="font-size: 12px; padding: 8px 16px;">
                    @(showFilters ? "‚ñ≤ Hide" : "‚ñº Show") Filters & Sort Options
                </button>
            </div>
        </div>

        @if (showFilters)
        {
            <div class="filter-section">
                <div class="filter-title">‚ñ∫ Filter By Platform</div>
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <button class="btn-retro @(selectedPlatform == null ? "btn-retro-secondary" : "")" 
                            @onclick="() => FilterByPlatform(null)">
                        All (@library.Games.Count)
                    </button>
                    @foreach (var platform in library.Games.Select(g => g.Platform).Distinct().OrderBy(p => p.ToString()))
                    {
                        var count = library.Games.Count(g => g.Platform == platform);
                        <button class="btn-retro @(selectedPlatform == platform ? "btn-retro-secondary" : "")" 
                                @onclick="() => FilterByPlatform(platform)">
                            @platform (@count)
                        </button>
                    }
                </div>
            </div>

            <div class="filter-section" style="margin-top: 20px;">
                <div class="filter-title">‚ñ∫ Sort By</div>
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <button class="btn-retro @(sortOption == SortOption.Title ? "btn-retro-secondary" : "")" 
                            @onclick="() => ChangeSortOption(SortOption.Title)">
                        üìù Title (A-Z)
                    </button>
                    <button class="btn-retro @(sortOption == SortOption.LastPlayed ? "btn-retro-secondary" : "")" 
                            @onclick="() => ChangeSortOption(SortOption.LastPlayed)">
                        üéÆ Last Played
                    </button>
                    <button class="btn-retro @(sortOption == SortOption.MostPlayed ? "btn-retro-secondary" : "")" 
                            @onclick="() => ChangeSortOption(SortOption.MostPlayed)">
                        ‚è± Most Hours
                    </button>
                    <button class="btn-retro @(sortOption == SortOption.RecentlyAdded ? "btn-retro-secondary" : "")" 
                            @onclick="() => ChangeSortOption(SortOption.RecentlyAdded)">
                        ‚ûï Recently Added
                    </button>
                    <button class="btn-retro @(sortOption == SortOption.ReleaseDate ? "btn-retro-secondary" : "")" 
                            @onclick="() => ChangeSortOption(SortOption.ReleaseDate)">
                        üìÖ Release Date
                    </button>
                </div>
            </div>
        }

        <div style="text-align: center; margin: 20px 0; color: var(--retro-text-dim);">
            Showing @filteredGames.Count of @library.Games.Count games
            @if (library.Games.Any(g => g.PlaytimeMinutes.HasValue && g.PlaytimeMinutes > 0))
            {
                var totalHours = library.Games.Where(g => g.PlaytimeMinutes.HasValue).Sum(g => g.PlaytimeMinutes!.Value) / 60.0;
                <span style="margin-left: 20px; color: var(--retro-accent);">
                    ‚è± Total playtime: @totalHours.ToString("F1") hours
                </span>
            }
        </div>

        <div class="game-grid">
            @foreach (var game in GetSortedGames())
            {
                <div class="game-card" @onclick="() => ShowGameDetails(game)" style="cursor: pointer;">
                    @if (!string.IsNullOrEmpty(game.CoverImageUrl))
                    {
                        <div style="position: relative; width: 100%; height: 280px;">
                            <img src="@game.CoverImageUrl" 
                                 alt="@game.Title" 
                                 class="game-card-image"
                                 loading="lazy"
                                 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                            <div class="image-placeholder" style="display: none; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                                üéÆ
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="image-placeholder" style="display: flex; width: 100%; height: 280px; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                            üéÆ
                        </div>
                    }
                    <div class="game-card-body">
                        <h4 class="game-card-title">@game.Title</h4>
                        
                        <div class="game-card-info">
                            <span class="platform-badge">@game.Platform</span>
                        </div>

                        @if (!string.IsNullOrEmpty(game.Publisher))
                        {
                            <div class="game-card-info">
                                <span style="color: var(--retro-text-dim);">üì¶</span> @game.Publisher
                            </div>
                        }

                        @if (game.ReleaseDate.HasValue)
                        {
                            <div class="game-card-info">
                                <span style="color: var(--retro-text-dim);">üìÖ</span> @game.ReleaseDate.Value.ToString("MMM dd, yyyy")
                            </div>
                        }

                        @if (game.PlaytimeMinutes.HasValue && game.PlaytimeMinutes > 0)
                        {
                            <div class="game-card-info" style="color: var(--retro-accent); font-weight: bold;">
                                ‚è± @FormatPlaytime(game.PlaytimeMinutes.Value) hours played
                            </div>
                        }

                        @if (game.LastPlayed.HasValue)
                        {
                            <div class="game-card-info" style="color: var(--retro-warning);">
                                üéÆ Last: @FormatLastPlayed(game.LastPlayed.Value)
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        @if (!filteredGames.Any())
        {
            <div style="text-align: center; padding: 60px; color: var(--retro-text-dim);">
                <p style="font-size: 24px;">No games found</p>
                <p>Try selecting a different platform filter</p>
            </div>
        }
    }

    @* Game Details Modal *@
    @if (selectedGame != null)
    {
        <div class="modal-overlay" @onclick="CloseGameDetails">
            <div class="modal-content" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h3 style="flex: 1;">@selectedGame.Title</h3>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        @if (selectedGame.IsManuallyAdded)
                        {
                            <button class="btn-retro" 
                                    style="background-color: var(--retro-warning); border-color: var(--retro-warning); padding: 8px 16px; font-size: 14px;"
                                    @onclick="() => DeleteGame(selectedGame.Id)"
                                    disabled="@isDeletingGame">
                                @if (isDeletingGame)
                                {
                                    <span>‚ü≥ Deleting...</span>
                                }
                                else
                                {
                                    <span>üóëÔ∏è Delete</span>
                                }
                            </button>
                        }
                        <button class="modal-close" @onclick="CloseGameDetails">‚úï</button>
                    </div>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(selectedGame.CoverImageUrl))
                    {
                        <img src="@selectedGame.CoverImageUrl" alt="@selectedGame.Title" style="max-width: 250px; max-height: 350px; margin: 0 auto 15px; display: block; border: 4px solid var(--retro-border);" />
                    }
                    
                    <div style="margin-bottom: 12px;">
                        <span class="platform-badge">@selectedGame.Platform</span>
                        @foreach (var genre in selectedGame.Genres.Take(5))
                        {
                            <span style="display: inline-block; padding: 4px 8px; margin: 2px; border: 1px solid var(--retro-text-dim); color: var(--retro-text-dim); font-size: 11px;">
                                @genre
                            </span>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(selectedGame.Description))
                    {
                        <div style="margin: 15px 0; padding: 12px; background-color: rgba(0, 0, 0, 0.3); border-left: 4px solid var(--retro-accent); line-height: 1.5;">
                            <strong style="color: var(--retro-accent);">Description:</strong><br/>
                            @if (selectedGame.Description.Length > 300 && !showFullDescription)
                            {
                                <span>@selectedGame.Description.Substring(0, 300)...</span>
                                <button @onclick="ToggleDescription" 
                                        style="background: none; border: none; color: var(--retro-accent); cursor: pointer; text-decoration: underline; padding: 0; margin-left: 5px; font-family: 'Courier New', monospace;">
                                    Show more
                                </button>
                            }
                            else
                            {
                                <span>@selectedGame.Description</span>
                                @if (selectedGame.Description.Length > 300)
                                {
                                    <button @onclick="ToggleDescription" 
                                            style="background: none; border: none; color: var(--retro-accent); cursor: pointer; text-decoration: underline; padding: 0; margin-left: 5px; font-family: 'Courier New', monospace;">
                                        Show less
                                    </button>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <div style="margin: 15px 0; padding: 12px; background-color: rgba(0, 0, 0, 0.2); border-left: 4px solid var(--retro-text-dim); line-height: 1.5; color: var(--retro-text-dim); font-style: italic;">
                            No description available. Try syncing your library to fetch metadata.
                        </div>
                    }

                    <div class="game-details-grid">
                        @if (!string.IsNullOrEmpty(selectedGame.Developer))
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üë®‚Äçüíª Developer:</strong><br/>
                                @selectedGame.Developer
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(selectedGame.Publisher))
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üì¶ Publisher:</strong><br/>
                                @selectedGame.Publisher
                            </div>
                        }

                        @if (selectedGame.ReleaseDate.HasValue)
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üìÖ Release Date:</strong><br/>
                                @selectedGame.ReleaseDate.Value.ToString("MMMM dd, yyyy")
                            </div>
                        }

                        @if (selectedGame.PlaytimeMinutes.HasValue && selectedGame.PlaytimeMinutes > 0)
                        {
                            <div>
                                <strong style="color: var(--retro-accent);">‚è± Playtime:</strong><br/>
                                @FormatPlaytime(selectedGame.PlaytimeMinutes.Value) hours
                            </div>
                        }
                        else
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">‚è± Playtime:</strong><br/>
                                <span style="color: var(--retro-text-dim); font-style: italic;">No playtime recorded</span>
                            </div>
                        }

                        @if (selectedGame.LastPlayed.HasValue)
                        {
                            <div>
                                <strong style="color: var(--retro-warning);">üéÆ Last Played:</strong><br/>
                                @FormatLastPlayed(selectedGame.LastPlayed.Value)
                            </div>
                        }

                        <div>
                            <strong style="color: var(--retro-text-dim);">‚ûï Added to Library:</strong><br/>
                            @selectedGame.AddedToLibrary.ToString("MMMM dd, yyyy")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Add Game Modal *@
    @if (showAddGameModal)
    {
        <div class="modal-overlay" @onclick="CloseAddGameModal">
            <div class="modal-content" @onclick:stopPropagation="true" style="max-width: 900px; max-height: 90vh; overflow-y: auto;">
                <div class="modal-header">
                    <h3>‚ûï Add Game to Library</h3>
                    <button class="modal-close" @onclick="CloseAddGameModal">‚úï</button>
                </div>
                <div class="modal-body">
                    <div style="margin-bottom: 20px;">
                        <div style="position: relative;">
                            <span style="position: absolute; left: 15px; top: 50%; transform: translateY(-50%); font-size: 18px; pointer-events: none;">üîç</span>
                            <input type="text" 
                                   class="search-input" 
                                   placeholder="Search for games (e.g., Elden Ring, Hades, Cyberpunk)..."
                                   @bind="gameSearchQuery"
                                   @bind:event="oninput"
                                   @onkeyup="HandleSearchKeyPress"
                                   style="width: 100%; padding: 15px 45px 15px 45px; background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); color: var(--retro-text); font-family: 'Courier New', monospace; font-size: 16px; border-radius: 4px;" />
                            @if (isSearching)
                            {
                                <span style="position: absolute; right: 15px; top: 50%; transform: translateY(-50%); font-size: 18px;">‚ü≥</span>
                            }
                        </div>
                        <button class="btn-retro" @onclick="SearchGames" disabled="@isSearching" style="margin-top: 10px; width: 100%;">
                            @if (isSearching)
                            {
                                <span>üîç Searching...</span>
                            }
                            else
                            {
                                <span>üîç Search Games</span>
                            }
                        </button>
                    </div>

                    @if (searchResults != null && searchResults.Any())
                    {
                        <div style="margin-bottom: 20px;">
                            <h4 style="color: var(--retro-accent); margin-bottom: 15px;">Search Results (@searchResults.Count found)</h4>
                            <div class="game-grid" style="max-height: 500px; overflow-y: auto;">
                                @foreach (var game in searchResults)
                                {
                                    <div class="game-card" style="cursor: pointer; position: relative;" @onclick="() => SelectGameToAdd(game)">
                                        @if (!string.IsNullOrEmpty(game.CoverImageUrl))
                                        {
                                            <img src="@game.CoverImageUrl" 
                                                 alt="@game.Title" 
                                                 class="game-card-image"
                                                 onerror="this.onerror=null; this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                            <div class="image-placeholder" style="display: none; width: 100%; height: 200px; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                                                üéÆ
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="image-placeholder" style="display: flex; width: 100%; height: 200px; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                                                üéÆ
                                            </div>
                                        }
                                        <div class="game-card-body">
                                            <h4 class="game-card-title">@game.Title</h4>
                                            
                                            @if (!string.IsNullOrEmpty(game.Publisher))
                                            {
                                                <div class="game-card-info">
                                                    <span style="color: var(--retro-text-dim);">üì¶</span> @game.Publisher
                                                </div>
                                            }

                                            @if (game.ReleaseDate.HasValue)
                                            {
                                                <div class="game-card-info">
                                                    <span style="color: var(--retro-text-dim);">üìÖ</span> @game.ReleaseDate.Value.ToString("MMM dd, yyyy")
                                                </div>
                                            }

                                            @if (game.Genres.Any())
                                            {
                                                <div style="margin-top: 8px;">
                                                    @foreach (var genre in game.Genres.Take(3))
                                                    {
                                                        <span style="display: inline-block; padding: 2px 6px; margin: 2px; border: 1px solid var(--retro-text-dim); color: var(--retro-text-dim); font-size: 10px;">
                                                            @genre
                                                        </span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                        <div style="position: absolute; top: 10px; right: 10px; background-color: var(--retro-accent); color: white; padding: 5px 10px; border-radius: 4px; font-weight: bold;">
                                            ‚úì Select
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (searchResults != null && !searchResults.Any() && !isSearching)
                    {
                        <div style="text-align: center; padding: 40px; color: var(--retro-text-dim);">
                            <p style="font-size: 18px;">No games found</p>
                            <p>Try a different search term</p>
                        </div>
                    }
                    else if (searchResults == null && !isSearching)
                    {
                        <div style="text-align: center; padding: 40px; color: var(--retro-text-dim);">
                            <p style="font-size: 18px;">üéÆ Search for games to add to your library</p>
                            <p>Type a game name and click Search</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @* Add Game Confirmation Modal *@
    @if (selectedGameToAdd != null)
    {
        <div class="modal-overlay" @onclick="CancelAddGame">
            <div class="modal-content" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h3>Add "@selectedGameToAdd.Title" to Library</h3>
                    <button class="modal-close" @onclick="CancelAddGame">‚úï</button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(selectedGameToAdd.CoverImageUrl))
                    {
                        <img src="@selectedGameToAdd.CoverImageUrl" alt="@selectedGameToAdd.Title" style="max-width: 300px; max-height: 400px; margin: 0 auto 20px; display: block; border: 4px solid var(--retro-border);" />
                    }
                    
                    <div style="margin: 20px 0;">
                        <label style="display: block; margin-bottom: 10px; color: var(--retro-accent); font-weight: bold;">
                            Select Platform *
                        </label>
                        <select @bind="selectedPlatformForNewGame" 
                                class="platform-select"
                                style="width: 100%; padding: 12px; background-color: rgba(0, 0, 0, 0.4); border: 2px solid var(--retro-border); color: var(--retro-text); font-family: 'Courier New', monospace; font-size: 16px; border-radius: 4px;">
                            <option value="" style="background-color: #0a1628; color: var(--retro-text);">-- Select a Platform --</option>
                            @foreach (Platform platform in Enum.GetValues(typeof(Platform)))
                            {
                                <option value="@platform" style="background-color: #0a1628; color: var(--retro-text);">@platform</option>
                            }
                        </select>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedGameToAdd.Description))
                    {
                        <div style="margin: 20px 0; padding: 15px; background-color: rgba(0, 0, 0, 0.3); border-left: 4px solid var(--retro-accent); line-height: 1.6; max-height: 200px; overflow-y: auto;">
                            <strong style="color: var(--retro-accent);">Description:</strong><br/>
                            @selectedGameToAdd.Description
                        </div>
                    }

                    <div class="game-details-grid" style="margin: 20px 0;">
                        @if (!string.IsNullOrEmpty(selectedGameToAdd.Developer))
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üë®‚Äçüíª Developer:</strong><br/>
                                @selectedGameToAdd.Developer
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(selectedGameToAdd.Publisher))
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üì¶ Publisher:</strong><br/>
                                @selectedGameToAdd.Publisher
                            </div>
                        }

                        @if (selectedGameToAdd.ReleaseDate.HasValue)
                        {
                            <div>
                                <strong style="color: var(--retro-text-dim);">üìÖ Release Date:</strong><br/>
                                @selectedGameToAdd.ReleaseDate.Value.ToString("MMMM dd, yyyy")
                            </div>
                        }
                    </div>

                    @if (selectedGameToAdd.Genres.Any())
                    {
                        <div style="margin: 15px 0;">
                            <strong style="color: var(--retro-text-dim);">üéØ Genres:</strong><br/>
                            @foreach (var genre in selectedGameToAdd.Genres)
                            {
                                <span style="display: inline-block; padding: 4px 8px; margin: 2px; border: 1px solid var(--retro-text-dim); color: var(--retro-text-dim); font-size: 11px;">
                                    @genre
                                </span>
                            }
                        </div>
                    }

                    <div style="display: flex; gap: 10px; margin-top: 20px;">
                        <button class="btn-retro" @onclick="ConfirmAddGame" disabled="@isAddingGame" style="flex: 1; background-color: var(--retro-accent);">
                            @if (isAddingGame)
                            {
                                <span>‚ü≥ Adding...</span>
                            }
                            else
                            {
                                <span>‚úì Add to Library</span>
                            }
                        </button>
                        <button class="btn-retro" @onclick="CancelAddGame" disabled="@isAddingGame" style="flex: 1;">
                            Cancel
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(addGameError))
                    {
                        <div style="margin-top: 15px; padding: 10px; background-color: rgba(220, 38, 38, 0.2); border: 2px solid var(--retro-warning); color: var(--retro-warning); border-radius: 4px;">
                            ‚ö† @addGameError
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private UserLibrary? library;
    private List<Game> filteredGames = new();
    private Platform? selectedPlatform;
    private string? currentUserId;
    private bool isSyncing = false;
    private bool isDeletingGame = false;
    private bool showFullDescription = false;
    private Game? selectedGame = null;
    private SortOption sortOption = SortOption.LastPlayed; // Default to last played
    private string searchQuery = string.Empty;
    private bool showFilters = false;

    // Add game modal state
    private bool showAddGameModal = false;
    private bool isSearching = false;
    private bool isAddingGame = false;
    private string gameSearchQuery = string.Empty;
    private List<Game>? searchResults = null;
    private Game? selectedGameToAdd = null;
    private string selectedPlatformForNewGame = string.Empty;
    private string addGameError = string.Empty;

    // Auto-sync timer
    private System.Threading.Timer? autoSyncTimer;
    private const int AutoSyncIntervalMinutes = 30; // Sync every 30 minutes

    private enum SortOption
    {
        Title,
        LastPlayed,
        MostPlayed,
        RecentlyAdded,
        ReleaseDate
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserAsync();
        
        if (!string.IsNullOrEmpty(currentUserId))
        {
            library = await GameLibraryService.GetUserLibraryAsync(currentUserId);
            ApplyFilters();
            
            // Start auto-sync timer
            StartAutoSync();
        }
    }

    private async Task GetCurrentUserAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private async Task SyncLibrary()
    {
        if (string.IsNullOrEmpty(currentUserId) || isSyncing)
            return;

        isSyncing = true;
        StateHasChanged();

        try
        {
            await GameLibraryService.SyncLibraryAsync(currentUserId);
            library = await GameLibraryService.GetUserLibraryAsync(currentUserId);
            ApplyFilters(); // Reapply current filters
        }
        finally
        {
            isSyncing = false;
            StateHasChanged();
        }
    }

    private void ShowGameDetails(Game game)
    {
        selectedGame = game;
        showFullDescription = false; // Reset when showing new game
        StateHasChanged();
    }

    private void CloseGameDetails()
    {
        selectedGame = null;
        showFullDescription = false;
        StateHasChanged();
    }

    private void ToggleDescription()
    {
        showFullDescription = !showFullDescription;
        StateHasChanged();
    }

    private async Task DeleteGame(string gameId)
    {
        if (string.IsNullOrEmpty(currentUserId) || isDeletingGame)
            return;

        isDeletingGame = true;
        StateHasChanged();

        try
        {
            var result = await GameLibraryService.RemoveManualGameAsync(currentUserId, gameId);
            
            if (result)
            {
                // Close the modal
                selectedGame = null;
                
                // Refresh the library
                library = await GameLibraryService.GetUserLibraryAsync(currentUserId);
                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting game: {ex.Message}");
        }
        finally
        {
            isDeletingGame = false;
            StateHasChanged();
        }
    }

    private void FilterByPlatform(Platform? platform)
    {
        selectedPlatform = platform;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (library == null) return;

        // Start with all games or platform-filtered games
        var games = selectedPlatform.HasValue
            ? library.Games.Where(g => g.Platform == selectedPlatform.Value)
            : library.Games;

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var searchLower = searchQuery.ToLower();
            games = games.Where(g => 
                g.Title.ToLower().Contains(searchLower) ||
                (g.Developer?.ToLower().Contains(searchLower) ?? false) ||
                (g.Publisher?.ToLower().Contains(searchLower) ?? false) ||
                g.Genres.Any(genre => genre.ToLower().Contains(searchLower))
            );
        }

        filteredGames = games.ToList();
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        ApplyFilters();
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
        StateHasChanged();
    }

    private void ChangeSortOption(SortOption option)
    {
        sortOption = option;
        StateHasChanged();
    }

    private IEnumerable<Game> GetSortedGames()
    {
        return sortOption switch
        {
            SortOption.Title => filteredGames.OrderBy(g => g.Title),
            SortOption.LastPlayed => filteredGames
                .OrderByDescending(g => g.LastPlayed ?? DateTime.MinValue)
                .ThenByDescending(g => g.AddedToLibrary),
            SortOption.MostPlayed => filteredGames
                .OrderByDescending(g => g.PlaytimeMinutes ?? 0)
                .ThenBy(g => g.Title),
            SortOption.RecentlyAdded => filteredGames
                .OrderByDescending(g => g.AddedToLibrary)
                .ThenBy(g => g.Title),
            SortOption.ReleaseDate => filteredGames
                .OrderByDescending(g => g.ReleaseDate ?? DateTime.MinValue)
                .ThenBy(g => g.Title),
            _ => filteredGames.OrderBy(g => g.Title)
        };
    }

    private string FormatPlaytime(int minutes)
    {
        return (minutes / 60.0).ToString("F1");
    }

    private string FormatLastPlayed(DateTime lastPlayed)
    {
        var days = (DateTime.UtcNow - lastPlayed).Days;
        if (days == 0) return "Today";
        if (days == 1) return "Yesterday";
        if (days < 7) return $"{days} days ago";
        if (days < 30) return $"{days / 7} weeks ago";
        return lastPlayed.ToString("MMM dd, yyyy");
    }

    // Add game modal methods
    private void OpenAddGameModal()
    {
        showAddGameModal = true;
        searchResults = null;
        gameSearchQuery = string.Empty;
        StateHasChanged();
    }

    private void CloseAddGameModal()
    {
        showAddGameModal = false;
        searchResults = null;
        gameSearchQuery = string.Empty;
        StateHasChanged();
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(gameSearchQuery))
        {
            await SearchGames();
        }
    }

    private async Task SearchGames()
    {
        if (string.IsNullOrWhiteSpace(gameSearchQuery) || isSearching)
            return;

        isSearching = true;
        StateHasChanged();

        try
        {
            searchResults = await GameLibraryService.SearchGamesAsync(gameSearchQuery);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching games: {ex.Message}");
            searchResults = new List<Game>();
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private void SelectGameToAdd(Game game)
    {
        selectedGameToAdd = game;
        selectedPlatformForNewGame = string.Empty;
        addGameError = string.Empty;
        StateHasChanged();
    }

    private void CancelAddGame()
    {
        selectedGameToAdd = null;
        selectedPlatformForNewGame = string.Empty;
        addGameError = string.Empty;
        StateHasChanged();
    }

    private async Task ConfirmAddGame()
    {
        if (selectedGameToAdd == null || string.IsNullOrEmpty(currentUserId))
            return;

        if (string.IsNullOrEmpty(selectedPlatformForNewGame))
        {
            addGameError = "Please select a platform";
            StateHasChanged();
            return;
        }

        isAddingGame = true;
        addGameError = string.Empty;
        StateHasChanged();

        try
        {
            // Set the platform for the game
            selectedGameToAdd.Platform = Enum.Parse<Platform>(selectedPlatformForNewGame);

            // Add the game to the library
            await GameLibraryService.AddManualGameAsync(currentUserId, selectedGameToAdd);

            // Refresh the library
            library = await GameLibraryService.GetUserLibraryAsync(currentUserId);
            ApplyFilters();

            // Close modals
            selectedGameToAdd = null;
            showAddGameModal = false;
            searchResults = null;
            gameSearchQuery = string.Empty;
        }
        catch (Exception ex)
        {
            addGameError = $"Failed to add game: {ex.Message}";
            Console.WriteLine($"Error adding game: {ex.Message}");
        }
        finally
        {
            isAddingGame = false;
            StateHasChanged();
        }
    }

    private void StartAutoSync()
    {
        // Create a timer that fires every AutoSyncIntervalMinutes
        autoSyncTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                // Only sync if not already syncing and user is authenticated
                if (!isSyncing && !string.IsNullOrEmpty(currentUserId))
                {
                    await SyncLibrary();
                }
            });
        }, null, TimeSpan.FromMinutes(AutoSyncIntervalMinutes), TimeSpan.FromMinutes(AutoSyncIntervalMinutes));
    }

    public void Dispose()
    {
        autoSyncTimer?.Dispose();
    }
}
