@page "/"
@rendermode InteractiveServer
@using Cartridge.Web.Components.Layout
@layout RetroLayout
@using Cartridge.Core.Interfaces
@using Cartridge.Core.Models
@inject IGameLibraryService GameLibraryService
@inject NavigationManager Navigation

<PageTitle>CARTRIDGE - Home</PageTitle>

<div style="text-align: center; padding: 40px 20px;">
    <h2 style="color: var(--retro-primary); font-size: 32px; text-transform: uppercase; margin-bottom: 20px;">
        ▼ UNIFIED GAMING LIBRARY ▼
    </h2>
    <p style="color: var(--retro-text-dim); font-size: 16px; max-width: 800px; margin: 0 auto 30px;">
        All your games from Steam, Epic Games, GOG, and more - in one retro-styled interface.
        Track your playtime, organize your library, and never lose track of your collection again.
    </p>
    <button class="btn-retro btn-retro-secondary" @onclick="LoadLibrary" style="margin-bottom: 20px;">
        🔄 Refresh Library
    </button>

    @if (library == null)
    {
        <div class="loading-spinner"></div>
    }
    else
    {
        <div style="display: flex; justify-content: center; gap: 60px; flex-wrap: wrap; margin: 40px 0;">
            <div>
                <div class="stat-counter">@library.Games.Count</div>
                <span class="stat-label">Total Games</span>
            </div>
            <div>
                <div class="stat-counter">@library.ConnectedPlatforms.Count(p => p.Value)</div>
                <span class="stat-label">Connected Platforms</span>
            </div>
            <div>
                <div class="stat-counter" style="color: var(--retro-accent);">
                    @FormatPlaytime(library.Games.Sum(g => g.PlaytimeMinutes ?? 0))
                </div>
                <span class="stat-label">Total Hours Played</span>
            </div>
        </div>

        <div style="margin: 40px 0;">
            <a href="/library" class="btn-retro">► VIEW YOUR LIBRARY ◄</a>
        </div>

        <div style="margin-top: 60px;">
            <h3 style="color: var(--retro-secondary); font-size: 24px; text-transform: uppercase; margin-bottom: 30px;">
                ◄ Recently Played ►
            </h3>
            
            <div class="game-grid" style="max-width: 900px; margin: 0 auto;">
                @foreach (var game in library.Games.Where(g => g.LastPlayed.HasValue).OrderByDescending(g => g.LastPlayed).Take(3))
                {
                    <div class="game-card">
                        @if (!string.IsNullOrEmpty(game.CoverImageUrl))
                        {
                            <img src="@game.CoverImageUrl" 
                                 alt="@game.Title" 
                                 class="game-card-image"
                                 onerror="this.onerror=null; this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                            <div class="image-placeholder" style="display: none; width: 100%; height: 200px; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                                🎮
                            </div>
                        }
                        else
                        {
                            <div class="image-placeholder" style="display: flex; width: 100%; height: 200px; background: linear-gradient(135deg, #0a1628 0%, #152840 100%); align-items: center; justify-content: center; font-size: 48px; border-bottom: 4px solid var(--retro-border);">
                                🎮
                            </div>
                        }
                        <div class="game-card-body">
                            <h4 class="game-card-title">@game.Title</h4>
                            <div class="game-card-info">
                                <span class="platform-badge">@game.Platform</span>
                            </div>
                            <div class="game-card-info">
                                Last played: @game.LastPlayed?.ToString("MMM dd, yyyy")
                            </div>
                            @if (game.PlaytimeMinutes.HasValue)
                            {
                                <div class="game-card-info">
                                    Playtime: @FormatPlaytime(game.PlaytimeMinutes.Value) hours
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private UserLibrary? library;

    protected override async Task OnInitializedAsync()
    {
        await LoadLibrary();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload when navigating back to this page
        await LoadLibrary();
    }

    private async Task LoadLibrary()
    {
        try
        {
            library = await GameLibraryService.GetUserLibraryAsync("demo-user");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading library: {ex.Message}");
        }
    }

    private string FormatPlaytime(int minutes)
    {
        return (minutes / 60.0).ToString("F1");
    }
}
